name: DocUp CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Backend Build and Test
  backend:
    runs-on: ubuntu-latest
    name: Backend Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build backend
      working-directory: ./backend
      run: |
        echo "🏗️ Building backend..."
        mvn clean compile
        mvn package -DskipTests
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        echo "🧪 Running backend tests..."
        mvn test
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar
        retention-days: 7
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: backend/target/surefire-reports/
        retention-days: 7

  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    name: Frontend Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        echo "📦 Installing frontend dependencies..."
        npm ci --legacy-peer-deps
        
    - name: Build frontend
      working-directory: ./frontend
      run: |
        echo "🏗️ Building frontend..."
        npm run build
        
    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        echo "🧪 Running frontend tests..."
        npm run test -- --watch=false --browsers=ChromeHeadless || true
        
    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        echo "🔍 Running frontend linting..."
        npm run lint || true
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 7

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run OWASP Dependency Check
      working-directory: ./backend
      run: |
        echo "🔍 Running OWASP dependency check..."
        mvn org.owasp:dependency-check-maven:check || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/target/dependency-check-report.html
          backend/target/spotbugsXml.xml
        retention-days: 30

  # Docker Build
  docker:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/target/
        
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      run: |
        echo "🐳 Building backend Docker image..."
        docker build -t docup-backend:${{ github.sha }} ./backend
        
    - name: Build frontend Docker image
      run: |
        echo "🐳 Building frontend Docker image..."
        docker build -t docup-frontend:${{ github.sha }} ./frontend
        
    - name: List Docker images
      run: docker images

  # Deploy to Staging (Manual)
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [security, docker]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: http://localhost
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "This would deploy using docker-compose or your preferred method"
        echo "Application would be available at: http://localhost"
        
    - name: Health check
      run: |
        echo "🏥 Running health checks..."
        echo "curl http://localhost:8080/actuator/health || true"

  # Notify on Success
  notify:
    runs-on: ubuntu-latest
    name: Notify Success
    needs: [backend, frontend, security]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "📊 All jobs passed: backend, frontend, security"
        echo "🎉 DocUp application is ready for deployment!"
