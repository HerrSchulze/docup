name: DocUp Security Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-backend:
    name: Backend Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Backend Security Tests
      run: ./scripts/security-test-backend.sh
      working-directory: ./
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        MAVEN_OPTS: "-Dnvd.api.key=${{ secrets.NVD_API_KEY }}"
      
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: backend/target/dependency-check-report.html
        
    - name: Upload SpotBugs Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-security-report
        path: backend/target/spotbugsXml.xml
        
    - name: Upload PMD Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pmd-security-report
        path: backend/target/pmd.xml

  security-frontend:
    name: Frontend Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
      
    - name: Run Frontend Security Tests
      run: npm run security-scan
      working-directory: ./frontend
      
    - name: Upload Retire.js Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: retirejs-report
        path: frontend/retire-report.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker images
      run: docker-compose build
      
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docup_backend:latest'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        
    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docup_frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Set up JDK 21 (for Java analysis)
      if: matrix.language == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build Java project
      if: matrix.language == 'java'
      run: |
        cd backend
        ./mvnw clean compile -DskipTests
        
    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Build Angular project
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  security-summary:
    name: Security Test Summary
    runs-on: ubuntu-latest
    needs: [security-backend, security-frontend, docker-security, codeql-analysis]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Security Summary
      run: |
        echo "## ðŸ”’ Security Testing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Security Tests" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… OWASP Dependency Check" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… SpotBugs Security Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… PMD Security Rules" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Checkstyle Security Standards" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Security Tests" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… ESLint Security Rules" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… NPM Audit Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Retire.js Library Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Container Security" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Trivy Container Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… CodeQL Security Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY
