{"ast":null,"code":"import _asyncToGenerator from \"/home/i01033/docup/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let CameraService = /*#__PURE__*/(() => {\n  class CameraService {\n    constructor() {}\n    /**\n     * Get user media stream for camera access\n     */\n    getMediaStream() {\n      return _asyncToGenerator(function* (constraints = {\n        video: true\n      }) {\n        try {\n          if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Camera access not supported by this browser');\n          }\n          return yield navigator.mediaDevices.getUserMedia(constraints);\n        } catch (error) {\n          console.error('Error accessing camera:', error);\n          throw new Error('Failed to access camera. Please check permissions.');\n        }\n      }).apply(this, arguments);\n    }\n    /**\n     * Capture photo from video stream\n     */\n    capturePhoto(videoElement) {\n      return new Promise((resolve, reject) => {\n        try {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          if (!ctx) {\n            reject(new Error('Canvas context not available'));\n            return;\n          }\n          canvas.width = videoElement.videoWidth;\n          canvas.height = videoElement.videoHeight;\n          ctx.drawImage(videoElement, 0, 0);\n          canvas.toBlob(blob => {\n            if (blob) {\n              resolve(blob);\n            } else {\n              reject(new Error('Failed to capture photo'));\n            }\n          }, 'image/jpeg', 0.9);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n    /**\n     * Stop media stream\n     */\n    stopMediaStream(stream) {\n      stream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n    /**\n     * Check if camera is available\n     */\n    isCameraAvailable() {\n      return _asyncToGenerator(function* () {\n        try {\n          const devices = yield navigator.mediaDevices.enumerateDevices();\n          return devices.some(device => device.kind === 'videoinput');\n        } catch (error) {\n          console.error('Error checking camera availability:', error);\n          return false;\n        }\n      })();\n    }\n    /**\n     * Get available camera devices\n     */\n    getCameraDevices() {\n      return _asyncToGenerator(function* () {\n        try {\n          const devices = yield navigator.mediaDevices.enumerateDevices();\n          return devices.filter(device => device.kind === 'videoinput');\n        } catch (error) {\n          console.error('Error getting camera devices:', error);\n          return [];\n        }\n      })();\n    }\n    static {\n      this.ɵfac = function CameraService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CameraService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CameraService,\n        factory: CameraService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CameraService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}