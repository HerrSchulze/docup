{"ast":null,"code":"import { HttpEventType, HttpRequest } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UploadService = /*#__PURE__*/(() => {\n  class UploadService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.production ? '/api' : 'http://localhost:8080/api';\n      this.progressSubject = new Subject();\n      this.startTime = 0;\n      this.progress$ = this.progressSubject.asObservable();\n    }\n    /**\n     * Upload file with detailed progress tracking\n     */\n    uploadFile(file) {\n      this.startTime = Date.now();\n      return new Observable(observer => {\n        this.updateProgress('preparing', 0, 'Datei wird vorbereitet...');\n        const formData = new FormData();\n        formData.append('file', file);\n        const request = new HttpRequest('POST', `${this.apiUrl}/upload`, formData, {\n          reportProgress: true\n        });\n        this.http.request(request).subscribe({\n          next: event => {\n            this.handleUploadEvent(event, observer, file);\n          },\n          error: error => {\n            this.updateProgress('error', 0, this.getErrorMessage(error));\n            observer.error(error);\n          }\n        });\n      });\n    }\n    /**\n     * Get current upload progress\n     */\n    getUploadProgress() {\n      return this.progressSubject.asObservable();\n    }\n    /**\n     * Get upload info (file size limits, allowed types, etc.)\n     */\n    getUploadInfo() {\n      return this.http.get(`${this.apiUrl}/upload/info`);\n    }\n    /**\n     * Validate file before upload\n     */\n    validateFile(file) {\n      const errors = [];\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];\n      if (file.size > maxSize) {\n        errors.push('File size exceeds 10MB limit');\n      }\n      if (!allowedTypes.includes(file.type)) {\n        errors.push('File type not supported. Please use JPG, PNG, or PDF files.');\n      }\n      return {\n        valid: errors.length === 0,\n        errors\n      };\n    }\n    /**\n     * Reset upload progress\n     */\n    resetProgress() {\n      this.progressSubject.next({\n        status: 'Bereit',\n        percentage: 0,\n        phase: 'preparing',\n        message: ''\n      });\n    }\n    /**\n     * Handle different HTTP events during upload\n     */\n    handleUploadEvent(event, observer, file) {\n      switch (event.type) {\n        case HttpEventType.Sent:\n          this.updateProgress('uploading', 5, 'Upload gestartet...');\n          break;\n        case HttpEventType.UploadProgress:\n          if (event.total) {\n            const uploadPercentage = Math.round(event.loaded / event.total * 100);\n            const adjustedPercentage = Math.min(uploadPercentage * 0.3, 30); // Upload is 30% of total process\n            this.updateProgress('uploading', adjustedPercentage, `Datei wird hochgeladen... ${uploadPercentage}%`);\n          }\n          break;\n        case HttpEventType.ResponseHeader:\n          this.updateProgress('virus-scan', 35, 'Virenprüfung läuft...');\n          // Simulate virus scan progress\n          this.simulateVirusScanProgress();\n          break;\n        case HttpEventType.DownloadProgress:\n          // This indicates the server is sending the response (OCR processing complete)\n          this.updateProgress('ocr-processing', 85, 'Texterkennung fast abgeschlossen...');\n          break;\n        case HttpEventType.Response:\n          if (event.body) {\n            this.updateProgress('complete', 100, 'Upload erfolgreich abgeschlossen!');\n            observer.next(event.body);\n            observer.complete();\n          }\n          break;\n        default:\n          // Handle other event types silently\n          break;\n      }\n    }\n    /**\n     * Simulate virus scan progress with realistic timing\n     */\n    simulateVirusScanProgress() {\n      let progress = 35;\n      const interval = setInterval(() => {\n        progress += 2;\n        if (progress >= 50) {\n          clearInterval(interval);\n          this.updateProgress('ocr-processing', 50, 'Texterkennung wird gestartet...');\n          this.simulateOcrProgress();\n        } else {\n          this.updateProgress('virus-scan', progress, 'Virenprüfung läuft... Datei wird auf Schadsoftware überprüft');\n        }\n      }, 200);\n    }\n    /**\n     * Simulate OCR processing progress\n     */\n    simulateOcrProgress() {\n      let progress = 50;\n      const messages = ['Text wird analysiert...', 'Zeichen werden erkannt...', 'Wörter werden zusammengefügt...', 'Textformatierung wird verarbeitet...', 'Qualitätsprüfung läuft...'];\n      let messageIndex = 0;\n      const interval = setInterval(() => {\n        progress += 3;\n        if (progress >= 95) {\n          clearInterval(interval);\n          this.updateProgress('ocr-processing', 95, 'Texterkennung wird abgeschlossen...');\n        } else {\n          const message = messages[Math.floor((progress - 50) / 9)] || messages[messageIndex];\n          this.updateProgress('ocr-processing', progress, message);\n          if ((progress - 50) % 9 === 0) messageIndex++;\n        }\n      }, 300);\n    }\n    /**\n     * Update progress and notify subscribers\n     */\n    updateProgress(phase, percentage, message) {\n      const estimatedTimeRemaining = this.calculateEstimatedTime(percentage);\n      this.progressSubject.next({\n        status: this.getStatusText(phase),\n        percentage,\n        phase,\n        message,\n        estimatedTimeRemaining\n      });\n    }\n    /**\n     * Calculate estimated time remaining\n     */\n    calculateEstimatedTime(percentage) {\n      if (percentage <= 5 || this.startTime === 0) return undefined;\n      const elapsed = Date.now() - this.startTime;\n      const estimatedTotal = elapsed / percentage * 100;\n      return Math.max(0, estimatedTotal - elapsed);\n    }\n    /**\n     * Get user-friendly status text\n     */\n    getStatusText(phase) {\n      switch (phase) {\n        case 'preparing':\n          return 'Vorbereitung';\n        case 'uploading':\n          return 'Upload';\n        case 'virus-scan':\n          return 'Sicherheitsprüfung';\n        case 'ocr-processing':\n          return 'Texterkennung';\n        case 'complete':\n          return 'Abgeschlossen';\n        case 'error':\n          return 'Fehler';\n        default:\n          return 'Verarbeitung';\n      }\n    }\n    /**\n     * Get user-friendly error message\n     */\n    getErrorMessage(error) {\n      if (error.status === 413) {\n        return 'Die Datei ist zu groß. Maximale Größe: 10 MB';\n      }\n      if (error.status === 415) {\n        return 'Dateityp nicht unterstützt. Erlaubt: JPG, PNG, PDF';\n      }\n      if (error.status === 0) {\n        return 'Verbindungsfehler. Bitte überprüfen Sie Ihre Internetverbindung';\n      }\n      if (error.error?.message) {\n        return error.error.message;\n      }\n      return 'Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es erneut';\n    }\n    static {\n      this.ɵfac = function UploadService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || UploadService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UploadService,\n        factory: UploadService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UploadService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}