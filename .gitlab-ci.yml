# GitLab CI/CD Pipeline for DocUp Application
# This pipeline builds, tests, and optionally deploys the DocUp application

stages:
  - build
  - test
  - security
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

cache:
  paths:
    - .m2/repository/
    - frontend/node_modules/

# Build Stage
build:backend:
  stage: build
  image: maven:3.9-openjdk-17
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean compile
  artifacts:
    paths:
      - backend/target/classes/
    expire_in: 1 hour

build:frontend:
  stage: build
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npm run build --prod
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour
  cache:
    paths:
      - frontend/node_modules/
      - frontend/.npm/

# Test Stage
test:backend:
  stage: test
  image: maven:3.9-openjdk-17
  dependencies:
    - build:backend
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
    paths:
      - backend/target/surefire-reports/
    expire_in: 1 week

test:frontend:
  stage: test
  image: node:18-alpine
  dependencies:
    - build:frontend
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npm run test -- --watch=false --browsers=ChromeHeadless
  artifacts:
    reports:
      junit:
        - frontend/coverage/*/junit.xml
    paths:
      - frontend/coverage/
    expire_in: 1 week

# Security Stage
security:dependency-check:
  stage: security
  image: maven:3.9-openjdk-17
  script:
    - cd backend
    - mvn org.owasp:dependency-check-maven:check
  artifacts:
    reports:
      dependency_scanning: backend/target/dependency-check-report.xml
    paths:
      - backend/target/dependency-check-report.html
    expire_in: 1 week
  allow_failure: true

# Docker Build Stage
build:docker:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build -t docup-backend ./backend
    - docker build -t docup-frontend ./frontend
    - docker images
  only:
    - main
    - develop
  when: manual

# Deployment Stage (Manual for safety)
deploy:staging:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - echo "Deploying to staging environment..."
    - docker-compose -f docker-compose.yml up -d
    - echo "Application deployed at http://localhost"
    - echo "Health check: curl http://localhost:8080/api/health"
  environment:
    name: staging
    url: http://localhost
  only:
    - main
  when: manual

# Production deployment (manual approval required)
deploy:production:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - echo "Deploying to production environment..."
    - docker-compose -f docker-compose.yml up -d
    - echo "Production deployment completed"
  environment:
    name: production
    url: https://your-production-domain.com
  only:
    - main
  when: manual
  allow_failure: false

# Cleanup job to remove old artifacts
cleanup:
  stage: deploy
  script:
    - echo "Cleaning up old artifacts and images..."
    - docker system prune -f
  when: manual
  only:
    - schedules
